{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wrapper over other Faker providers to return their value or None . Useful to create data of type Optional[Any] . Installing \u00b6 pip install faker-optional A Simple Example \u00b6 from faker import Faker from faker_optional import OptionalProvider fake = Faker () fake . add_provider ( OptionalProvider ) fake . optional_int () # None fake . optional_int () # 1234 Usage \u00b6 OptionalProvider uses existent faker providers to create the data, so you can use the provider method arguments. For example, optional_int uses the python provider pyint , so you can use the min_value , max_value , and step arguments. Every optional_ method accepts the float ratio argument between 0 and 1 , with a default value of 0.5 to define what percent of results should be None , a greater value will mean that less results will be None . Check the supported methods . If you want one that's not included, it's really easy to implement it yourself, please make a pull request . References \u00b6 As most open sourced programs, faker-optional is standing on the shoulders of giants, namely: Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakehell Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. Pip-tools Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer. Contributing \u00b6 For guidance on setting up a development environment, and how to make a contribution to faker-optional , see Contributing to faker-optional .","title":"Faker Optional"},{"location":"#installing","text":"pip install faker-optional","title":"Installing"},{"location":"#a-simple-example","text":"from faker import Faker from faker_optional import OptionalProvider fake = Faker () fake . add_provider ( OptionalProvider ) fake . optional_int () # None fake . optional_int () # 1234","title":"A Simple Example"},{"location":"#usage","text":"OptionalProvider uses existent faker providers to create the data, so you can use the provider method arguments. For example, optional_int uses the python provider pyint , so you can use the min_value , max_value , and step arguments. Every optional_ method accepts the float ratio argument between 0 and 1 , with a default value of 0.5 to define what percent of results should be None , a greater value will mean that less results will be None . Check the supported methods . If you want one that's not included, it's really easy to implement it yourself, please make a pull request .","title":"Usage"},{"location":"#references","text":"As most open sourced programs, faker-optional is standing on the shoulders of giants, namely: Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakehell Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. Pip-tools Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer.","title":"References"},{"location":"#contributing","text":"For guidance on setting up a development environment, and how to make a contribution to faker-optional , see Contributing to faker-optional .","title":"Contributing"},{"location":"contributing/","text":"So you've started using faker-optional and want to show your gratitude to the project, depending on your programming skills there are different ways to do so. I don't know how to program \u00b6 There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it. I know how to program in Python \u00b6 If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you. Issues \u00b6 Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import faker_optional.version; print(faker_optional.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install faker-optional or know it's not relevant to your question or feature request. Pull Requests \u00b6 faker-optional is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github. Development facilities \u00b6 To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/faker-optional.git cd faker-optional Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install faker-optional, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: faker-optional uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGs='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to faker-optional !","title":"Contributing"},{"location":"contributing/#i-dont-know-how-to-program","text":"There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it.","title":"I don't know how to program"},{"location":"contributing/#i-know-how-to-program-in-python","text":"If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you.","title":"I know how to program in Python"},{"location":"contributing/#issues","text":"Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import faker_optional.version; print(faker_optional.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install faker-optional or know it's not relevant to your question or feature request.","title":"Issues"},{"location":"contributing/#pull-requests","text":"faker-optional is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github.","title":"Pull Requests"},{"location":"contributing/#development-facilities","text":"To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/faker-optional.git cd faker-optional Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install faker-optional, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: faker-optional uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGs='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to faker-optional !","title":"Development facilities"},{"location":"reference/","text":"faker_optional special \u00b6 Faker provider to create optional data. model \u00b6 Define the Fake providers. OptionalProvider ( BaseProvider ) \u00b6 Faker Provider to simulate Optional data. __init__ ( self , generator ) special \u00b6 Declare the other faker providers. Source code in faker_optional/model.py def __init__ ( self , generator : Generator ) -> None : \"\"\"Declare the other faker providers.\"\"\" super () . __init__ ( generator ) self . python = PyProvider ( generator ) self . date = DateProvider ( generator ) self . lorem = LoremProvider ( generator ) self . person = PersonProvider ( generator ) optional_bool ( self , ratio = 0.5 ) \u00b6 Return an optional bool. Source code in faker_optional/model.py def optional_bool ( self , ratio : float = 0.5 ) -> Optional [ bool ]: \"\"\"Return an optional bool.\"\"\" return self . _optional_value ( self . python . pybool (), ratio ) optional_date ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional date. Source code in faker_optional/model.py def optional_date ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ date ]: \"\"\"Return an optional date.\"\"\" return self . _optional_value ( self . date . date ( ** kwargs ), ratio ) optional_datetime ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional datetime. Source code in faker_optional/model.py def optional_datetime ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ datetime ]: \"\"\"Return an optional datetime.\"\"\" return self . _optional_value ( self . date . date_time ( ** kwargs ), ratio ) optional_dict ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional dictionary. Source code in faker_optional/model.py def optional_dict ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ Dict [ Any , Any ]]: \"\"\"Return an optional dictionary.\"\"\" return self . _optional_value ( self . python . pydict ( ** kwargs ), ratio ) optional_first_name ( self , ratio = 0.5 ) \u00b6 Return an optional first_name. Source code in faker_optional/model.py def optional_first_name ( self , ratio : float = 0.5 ) -> Optional [ str ]: \"\"\"Return an optional first_name.\"\"\" return self . _optional_value ( self . person . first_name (), ratio ) optional_first_name_female ( self , ratio = 0.5 ) \u00b6 Return an optional first_name_female. Source code in faker_optional/model.py def optional_first_name_female ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional first_name_female.\"\"\" return self . _optional_value ( self . person . first_name_female (), ratio ) optional_first_name_male ( self , ratio = 0.5 ) \u00b6 Return an optional first_name_male. Source code in faker_optional/model.py def optional_first_name_male ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional first_name_male.\"\"\" return self . _optional_value ( self . person . first_name_male (), ratio ) optional_first_name_nonbinary ( self , ratio = 0.5 ) \u00b6 Return an optional first_name_nonbinary. Source code in faker_optional/model.py def optional_first_name_nonbinary ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional first_name_nonbinary.\"\"\" return self . _optional_value ( self . person . first_name_nonbinary (), ratio ) optional_float ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional float number. Source code in faker_optional/model.py def optional_float ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ float ]: \"\"\"Return an optional float number.\"\"\" return self . _optional_value ( self . python . pyfloat ( ** kwargs ), ratio ) optional_int ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional integer. Source code in faker_optional/model.py def optional_int ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ int ]: \"\"\"Return an optional integer.\"\"\" return self . _optional_value ( self . python . pyint ( ** kwargs )) optional_last_name ( self , ratio = 0.5 ) \u00b6 Return an optional last_name. Source code in faker_optional/model.py def optional_last_name ( self , ratio : float = 0.5 ) -> Optional [ str ]: \"\"\"Return an optional last_name.\"\"\" return self . _optional_value ( self . person . last_name (), ratio ) optional_last_name_female ( self , ratio = 0.5 ) \u00b6 Return an optional last_name_female. Source code in faker_optional/model.py def optional_last_name_female ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional last_name_female.\"\"\" return self . _optional_value ( self . person . last_name_female (), ratio ) optional_last_name_male ( self , ratio = 0.5 ) \u00b6 Return an optional last_name_male. Source code in faker_optional/model.py def optional_last_name_male ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional last_name_male.\"\"\" return self . _optional_value ( self . person . last_name_male (), ratio ) optional_last_name_nonbinary ( self , ratio = 0.5 ) \u00b6 Return an optional last_name_nonbinary. Source code in faker_optional/model.py def optional_last_name_nonbinary ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional last_name_nonbinary.\"\"\" return self . _optional_value ( self . person . last_name_nonbinary (), ratio ) optional_list ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional list. Source code in faker_optional/model.py def optional_list ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ List [ Any ]]: \"\"\"Return an optional list.\"\"\" return self . _optional_value ( self . python . pylist ( ** kwargs ), ratio ) optional_name ( self , ratio = 0.5 ) \u00b6 Return an optional name. Source code in faker_optional/model.py def optional_name ( self , ratio : float = 0.5 ) -> Optional [ str ]: \"\"\"Return an optional name.\"\"\" return self . _optional_value ( self . person . name (), ratio ) optional_name_female ( self , ratio = 0.5 ) \u00b6 Return an optional name_female. Source code in faker_optional/model.py def optional_name_female ( self , ratio : float = 0.5 ) -> Optional [ str ]: \"\"\"Return an optional name_female.\"\"\" return self . _optional_value ( self . person . name_female (), ratio ) optional_name_male ( self , ratio = 0.5 ) \u00b6 Return an optional name_male. Source code in faker_optional/model.py def optional_name_male ( self , ratio : float = 0.5 ) -> Optional [ str ]: \"\"\"Return an optional name_male.\"\"\" return self . _optional_value ( self . person . name_male (), ratio ) optional_name_nonbinary ( self , ratio = 0.5 ) \u00b6 Return an optional name_nonbinary. Source code in faker_optional/model.py def optional_name_nonbinary ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional name_nonbinary.\"\"\" return self . _optional_value ( self . person . name_nonbinary (), ratio ) optional_paragraph ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional paragraph. Source code in faker_optional/model.py def optional_paragraph ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional paragraph.\"\"\" return self . _optional_value ( self . lorem . paragraph ( ** kwargs ), ratio ) optional_paragraphs ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional paragraph. Source code in faker_optional/model.py def optional_paragraphs ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional paragraph.\"\"\" return self . _optional_value ( self . lorem . paragraphs ( ** kwargs ), ratio ) optional_sentence ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional sentence. Source code in faker_optional/model.py def optional_sentence ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional sentence.\"\"\" return self . _optional_value ( self . lorem . sentence ( ** kwargs ), ratio ) optional_sentences ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional sentence. Source code in faker_optional/model.py def optional_sentences ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional sentence.\"\"\" return self . _optional_value ( self . lorem . sentences ( ** kwargs ), ratio ) optional_set ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional set. Source code in faker_optional/model.py def optional_set ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ Set [ Any ]]: \"\"\"Return an optional set.\"\"\" return self . _optional_value ( self . python . pyset ( ** kwargs ), ratio ) optional_str ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional random string of upper and lowercase letters. Source code in faker_optional/model.py def optional_str ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional random string of upper and lowercase letters.\"\"\" return self . _optional_value ( self . python . pystr ( ** kwargs ), ratio ) optional_text ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional text. Source code in faker_optional/model.py def optional_text ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional text.\"\"\" return self . _optional_value ( self . lorem . text ( ** kwargs ), ratio ) optional_texts ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional text. Source code in faker_optional/model.py def optional_texts ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional text.\"\"\" return self . _optional_value ( self . lorem . texts ( ** kwargs ), ratio ) optional_time ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional time. Source code in faker_optional/model.py def optional_time ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ time ]: \"\"\"Return an optional time.\"\"\" return self . _optional_value ( self . date . time ( ** kwargs ), ratio ) optional_tuple ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional tuple. Source code in faker_optional/model.py def optional_tuple ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ Tuple [ Any ]]: \"\"\"Return an optional tuple.\"\"\" return self . _optional_value ( self . python . pytuple ( ** kwargs ), ratio ) optional_word ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional word. Source code in faker_optional/model.py def optional_word ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional word.\"\"\" return self . _optional_value ( self . lorem . word ( ** kwargs ), ratio ) optional_words ( self , ratio = 0.5 , ** kwargs ) \u00b6 Return an optional word. Source code in faker_optional/model.py def optional_words ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional word.\"\"\" return self . _optional_value ( self . lorem . words ( ** kwargs ), ratio ) version \u00b6 Utilities to retrieve the information of the program version. version_info () \u00b6 Display the version of the program, python and the platform. Source code in faker_optional/version.py def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" info = { \"faker_optional version\" : __version__ , \"python version\" : sys . version . replace ( \" \\n \" , \" \" ), \"platform\" : platform . platform (), } return \" \\n \" . join ( f \" { k + ':' : >30 } { v } \" for k , v in info . items ())","title":"Reference"},{"location":"reference/#faker_optional","text":"Faker provider to create optional data.","title":"faker_optional"},{"location":"reference/#faker_optional.model","text":"Define the Fake providers.","title":"model"},{"location":"reference/#faker_optional.model.OptionalProvider","text":"Faker Provider to simulate Optional data.","title":"OptionalProvider"},{"location":"reference/#faker_optional.model.OptionalProvider.__init__","text":"Declare the other faker providers. Source code in faker_optional/model.py def __init__ ( self , generator : Generator ) -> None : \"\"\"Declare the other faker providers.\"\"\" super () . __init__ ( generator ) self . python = PyProvider ( generator ) self . date = DateProvider ( generator ) self . lorem = LoremProvider ( generator ) self . person = PersonProvider ( generator )","title":"__init__()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_bool","text":"Return an optional bool. Source code in faker_optional/model.py def optional_bool ( self , ratio : float = 0.5 ) -> Optional [ bool ]: \"\"\"Return an optional bool.\"\"\" return self . _optional_value ( self . python . pybool (), ratio )","title":"optional_bool()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_date","text":"Return an optional date. Source code in faker_optional/model.py def optional_date ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ date ]: \"\"\"Return an optional date.\"\"\" return self . _optional_value ( self . date . date ( ** kwargs ), ratio )","title":"optional_date()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_datetime","text":"Return an optional datetime. Source code in faker_optional/model.py def optional_datetime ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ datetime ]: \"\"\"Return an optional datetime.\"\"\" return self . _optional_value ( self . date . date_time ( ** kwargs ), ratio )","title":"optional_datetime()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_dict","text":"Return an optional dictionary. Source code in faker_optional/model.py def optional_dict ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ Dict [ Any , Any ]]: \"\"\"Return an optional dictionary.\"\"\" return self . _optional_value ( self . python . pydict ( ** kwargs ), ratio )","title":"optional_dict()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_first_name","text":"Return an optional first_name. Source code in faker_optional/model.py def optional_first_name ( self , ratio : float = 0.5 ) -> Optional [ str ]: \"\"\"Return an optional first_name.\"\"\" return self . _optional_value ( self . person . first_name (), ratio )","title":"optional_first_name()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_first_name_female","text":"Return an optional first_name_female. Source code in faker_optional/model.py def optional_first_name_female ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional first_name_female.\"\"\" return self . _optional_value ( self . person . first_name_female (), ratio )","title":"optional_first_name_female()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_first_name_male","text":"Return an optional first_name_male. Source code in faker_optional/model.py def optional_first_name_male ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional first_name_male.\"\"\" return self . _optional_value ( self . person . first_name_male (), ratio )","title":"optional_first_name_male()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_first_name_nonbinary","text":"Return an optional first_name_nonbinary. Source code in faker_optional/model.py def optional_first_name_nonbinary ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional first_name_nonbinary.\"\"\" return self . _optional_value ( self . person . first_name_nonbinary (), ratio )","title":"optional_first_name_nonbinary()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_float","text":"Return an optional float number. Source code in faker_optional/model.py def optional_float ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ float ]: \"\"\"Return an optional float number.\"\"\" return self . _optional_value ( self . python . pyfloat ( ** kwargs ), ratio )","title":"optional_float()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_int","text":"Return an optional integer. Source code in faker_optional/model.py def optional_int ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ int ]: \"\"\"Return an optional integer.\"\"\" return self . _optional_value ( self . python . pyint ( ** kwargs ))","title":"optional_int()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_last_name","text":"Return an optional last_name. Source code in faker_optional/model.py def optional_last_name ( self , ratio : float = 0.5 ) -> Optional [ str ]: \"\"\"Return an optional last_name.\"\"\" return self . _optional_value ( self . person . last_name (), ratio )","title":"optional_last_name()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_last_name_female","text":"Return an optional last_name_female. Source code in faker_optional/model.py def optional_last_name_female ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional last_name_female.\"\"\" return self . _optional_value ( self . person . last_name_female (), ratio )","title":"optional_last_name_female()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_last_name_male","text":"Return an optional last_name_male. Source code in faker_optional/model.py def optional_last_name_male ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional last_name_male.\"\"\" return self . _optional_value ( self . person . last_name_male (), ratio )","title":"optional_last_name_male()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_last_name_nonbinary","text":"Return an optional last_name_nonbinary. Source code in faker_optional/model.py def optional_last_name_nonbinary ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional last_name_nonbinary.\"\"\" return self . _optional_value ( self . person . last_name_nonbinary (), ratio )","title":"optional_last_name_nonbinary()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_list","text":"Return an optional list. Source code in faker_optional/model.py def optional_list ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ List [ Any ]]: \"\"\"Return an optional list.\"\"\" return self . _optional_value ( self . python . pylist ( ** kwargs ), ratio )","title":"optional_list()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_name","text":"Return an optional name. Source code in faker_optional/model.py def optional_name ( self , ratio : float = 0.5 ) -> Optional [ str ]: \"\"\"Return an optional name.\"\"\" return self . _optional_value ( self . person . name (), ratio )","title":"optional_name()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_name_female","text":"Return an optional name_female. Source code in faker_optional/model.py def optional_name_female ( self , ratio : float = 0.5 ) -> Optional [ str ]: \"\"\"Return an optional name_female.\"\"\" return self . _optional_value ( self . person . name_female (), ratio )","title":"optional_name_female()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_name_male","text":"Return an optional name_male. Source code in faker_optional/model.py def optional_name_male ( self , ratio : float = 0.5 ) -> Optional [ str ]: \"\"\"Return an optional name_male.\"\"\" return self . _optional_value ( self . person . name_male (), ratio )","title":"optional_name_male()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_name_nonbinary","text":"Return an optional name_nonbinary. Source code in faker_optional/model.py def optional_name_nonbinary ( self , ratio : float = 0.5 , ) -> Optional [ str ]: \"\"\"Return an optional name_nonbinary.\"\"\" return self . _optional_value ( self . person . name_nonbinary (), ratio )","title":"optional_name_nonbinary()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_paragraph","text":"Return an optional paragraph. Source code in faker_optional/model.py def optional_paragraph ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional paragraph.\"\"\" return self . _optional_value ( self . lorem . paragraph ( ** kwargs ), ratio )","title":"optional_paragraph()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_paragraphs","text":"Return an optional paragraph. Source code in faker_optional/model.py def optional_paragraphs ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional paragraph.\"\"\" return self . _optional_value ( self . lorem . paragraphs ( ** kwargs ), ratio )","title":"optional_paragraphs()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_sentence","text":"Return an optional sentence. Source code in faker_optional/model.py def optional_sentence ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional sentence.\"\"\" return self . _optional_value ( self . lorem . sentence ( ** kwargs ), ratio )","title":"optional_sentence()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_sentences","text":"Return an optional sentence. Source code in faker_optional/model.py def optional_sentences ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional sentence.\"\"\" return self . _optional_value ( self . lorem . sentences ( ** kwargs ), ratio )","title":"optional_sentences()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_set","text":"Return an optional set. Source code in faker_optional/model.py def optional_set ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ Set [ Any ]]: \"\"\"Return an optional set.\"\"\" return self . _optional_value ( self . python . pyset ( ** kwargs ), ratio )","title":"optional_set()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_str","text":"Return an optional random string of upper and lowercase letters. Source code in faker_optional/model.py def optional_str ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional random string of upper and lowercase letters.\"\"\" return self . _optional_value ( self . python . pystr ( ** kwargs ), ratio )","title":"optional_str()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_text","text":"Return an optional text. Source code in faker_optional/model.py def optional_text ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional text.\"\"\" return self . _optional_value ( self . lorem . text ( ** kwargs ), ratio )","title":"optional_text()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_texts","text":"Return an optional text. Source code in faker_optional/model.py def optional_texts ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional text.\"\"\" return self . _optional_value ( self . lorem . texts ( ** kwargs ), ratio )","title":"optional_texts()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_time","text":"Return an optional time. Source code in faker_optional/model.py def optional_time ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ time ]: \"\"\"Return an optional time.\"\"\" return self . _optional_value ( self . date . time ( ** kwargs ), ratio )","title":"optional_time()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_tuple","text":"Return an optional tuple. Source code in faker_optional/model.py def optional_tuple ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ Tuple [ Any ]]: \"\"\"Return an optional tuple.\"\"\" return self . _optional_value ( self . python . pytuple ( ** kwargs ), ratio )","title":"optional_tuple()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_word","text":"Return an optional word. Source code in faker_optional/model.py def optional_word ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional word.\"\"\" return self . _optional_value ( self . lorem . word ( ** kwargs ), ratio )","title":"optional_word()"},{"location":"reference/#faker_optional.model.OptionalProvider.optional_words","text":"Return an optional word. Source code in faker_optional/model.py def optional_words ( self , ratio : float = 0.5 , ** kwargs : Any ) -> Optional [ str ]: \"\"\"Return an optional word.\"\"\" return self . _optional_value ( self . lorem . words ( ** kwargs ), ratio )","title":"optional_words()"},{"location":"reference/#faker_optional.version","text":"Utilities to retrieve the information of the program version.","title":"version"},{"location":"reference/#faker_optional.version.version_info","text":"Display the version of the program, python and the platform. Source code in faker_optional/version.py def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" info = { \"faker_optional version\" : __version__ , \"python version\" : sys . version . replace ( \" \\n \" , \" \" ), \"platform\" : platform . platform (), } return \" \\n \" . join ( f \" { k + ':' : >30 } { v } \" for k , v in info . items ())","title":"version_info()"}]}